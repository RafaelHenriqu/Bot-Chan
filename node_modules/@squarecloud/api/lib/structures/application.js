"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const form_data_1 = __importDefault(require("form-data"));
const promises_1 = require("fs/promises");
const assertions_1 = require("../assertions");
const files_1 = __importDefault(require("../managers/files"));
/**
 * Represents a Square Cloud application
 *
 * @constructor
 * @param apiManager - The APIManager for this application
 * @param data - The data from this application
 */
class Application {
    /** The application Id */
    id;
    /** The application display name */
    tag;
    /** The url to manage the application via web */
    url;
    /** The application total ram */
    ram;
    /**
     * The application programming language
     *
     * - 'javascript'
     * - 'typescript'
     * - 'python'
     * - 'java'
     * - 'rust'
     * - 'go'
     */
    lang;
    /** The application plan tier ('free' or 'paid') */
    tier;
    /** The application avatar URL */
    avatar;
    /** The application current cluster */
    cluster;
    /** Whether the application is a website or not */
    isWebsite;
    /** Files manager for this application */
    files;
    /** @private API manager for this application */
    #apiManager;
    constructor(apiManager, data) {
        this.id = data.id;
        this.tag = data.tag;
        this.ram = data.ram;
        this.lang = data.lang;
        this.tier = data.type;
        this.avatar = data.avatar;
        this.cluster = data.cluster;
        this.isWebsite = data.isWebsite;
        this.url = `https://squarecloud.app/dashboard/app/${data.id}`;
        this.files = new files_1.default(apiManager, data.id);
        this.#apiManager = apiManager;
    }
    /** @returns The application current status information */
    async getStatus() {
        const data = (await this.#apiManager.application('status', this.id));
        const { network, cpu: cpuUsage, ram: ramUsage, storage: storageUsage, requests, running, status, uptime, time, } = data.response;
        return {
            status,
            running,
            network,
            requests,
            cpuUsage,
            ramUsage,
            storageUsage,
            uptimeTimestamp: uptime || 0,
            uptime: uptime ? new Date(uptime) : undefined,
            lastCheckTimestamp: time || 0,
            lastCheck: time ? new Date(time) : undefined,
        };
    }
    /** @returns The application logs */
    async getLogs() {
        const data = (await this.#apiManager.application('logs', this.id));
        return data.response?.logs;
    }
    /** @returns A backup download URL */
    async backupURL() {
        const data = (await this.#apiManager.application('backup', this.id));
        return data.response?.downloadURL;
    }
    /**
     * Starts up the application
     * @returns `true` for success or `false` for fail
     */
    async start() {
        const data = await this.#apiManager.application('start', this.id, 'POST');
        return data?.code === 'ACTION_SENT';
    }
    /**
     * Stops the application
     * @returns `true` for success or `false` for fail
     */
    async stop() {
        const data = await this.#apiManager.application('stop', this.id, 'POST');
        return data?.code === 'ACTION_SENT';
    }
    /**
     * Restarts the application
     * @returns `true` for success or `false` for fail
     */
    async restart() {
        const data = await this.#apiManager.application('restart', this.id, 'POST');
        return data?.code === 'ACTION_SENT';
    }
    /**
     * Deletes your whole application
     *
     * - This action is irreversible.
     * @returns `true` for success or `false` for fail
     */
    async delete() {
        const data = await this.#apiManager.application('delete', this.id, 'DELETE');
        return data?.code === 'APP_DELETED';
    }
    /**
     * Commit files to your application folder
     *
     * - This action is irreversible.
     *
     * - Tip: use this to get an absolute path.
     * ```ts
     * require('path').join(__dirname, 'fileName')
     * ```
     * - Tip2: use a zip file to commit more than one archive
     *
     * @param file - Buffer or absolute path to the file
     * @param fileName - The file name (e.g.: "index.js")
     * @param restart - Whether the application should be restarted after the commit
     * @returns `true` for success or `false` for fail
     */
    async commit(file, fileName, restart) {
        (0, assertions_1.validatePathLike)(file, 'COMMIT_DATA');
        if (fileName) {
            (0, assertions_1.validateString)(fileName, 'FILE_NAME');
        }
        if (typeof file === 'string') {
            file = await (0, promises_1.readFile)(file);
        }
        const formData = new form_data_1.default();
        formData.append('file', file, { filename: fileName || 'app.zip' });
        const data = await this.#apiManager.application(`commit?restart=${Boolean(restart)}`, this.id, {
            method: 'POST',
            body: formData.getBuffer(),
            headers: formData.getHeaders(),
        });
        return data?.code === 'SUCCESS';
    }
}
exports.default = Application;
//# sourceMappingURL=application.js.map