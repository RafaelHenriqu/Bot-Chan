/// <reference types="node" />
import APIManager from '../managers/api';
import FilesManager from '../managers/files';
import { ApplicationLanguage, ApplicationTier, Application as ApplicationType } from '../types';
import { ApplicationStatusData } from '../types/application';
/**
 * Represents a Square Cloud application
 *
 * @constructor
 * @param apiManager - The APIManager for this application
 * @param data - The data from this application
 */
export default class Application {
    #private;
    /** The application Id */
    id: string;
    /** The application display name */
    tag: string;
    /** The url to manage the application via web */
    url: string;
    /** The application total ram */
    ram: number;
    /**
     * The application programming language
     *
     * - 'javascript'
     * - 'typescript'
     * - 'python'
     * - 'java'
     * - 'rust'
     * - 'go'
     */
    lang: ApplicationLanguage;
    /** The application plan tier ('free' or 'paid') */
    tier: ApplicationTier;
    /** The application avatar URL */
    avatar: string;
    /** The application current cluster */
    cluster: string;
    /** Whether the application is a website or not */
    isWebsite: boolean;
    /** Files manager for this application */
    files: FilesManager;
    constructor(apiManager: APIManager, data: ApplicationType);
    /** @returns The application current status information */
    getStatus(): Promise<ApplicationStatusData>;
    /** @returns The application logs */
    getLogs(): Promise<string>;
    /** @returns A backup download URL */
    backupURL(): Promise<string>;
    /**
     * Starts up the application
     * @returns `true` for success or `false` for fail
     */
    start(): Promise<boolean>;
    /**
     * Stops the application
     * @returns `true` for success or `false` for fail
     */
    stop(): Promise<boolean>;
    /**
     * Restarts the application
     * @returns `true` for success or `false` for fail
     */
    restart(): Promise<boolean>;
    /**
     * Deletes your whole application
     *
     * - This action is irreversible.
     * @returns `true` for success or `false` for fail
     */
    delete(): Promise<boolean>;
    /**
     * Commit files to your application folder
     *
     * - This action is irreversible.
     *
     * - Tip: use this to get an absolute path.
     * ```ts
     * require('path').join(__dirname, 'fileName')
     * ```
     * - Tip2: use a zip file to commit more than one archive
     *
     * @param file - Buffer or absolute path to the file
     * @param fileName - The file name (e.g.: "index.js")
     * @param restart - Whether the application should be restarted after the commit
     * @returns `true` for success or `false` for fail
     */
    commit(file: string | Buffer, fileName?: string, restart?: boolean): Promise<boolean>;
}
