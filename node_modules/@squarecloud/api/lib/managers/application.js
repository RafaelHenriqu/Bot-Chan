"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const form_data_1 = __importDefault(require("form-data"));
const promises_1 = require("fs/promises");
const assertions_1 = require("../assertions");
const user_1 = require("../structures/user");
class ApplicationManager {
    apiManager;
    constructor(apiManager) {
        this.apiManager = apiManager;
    }
    async get(appId) {
        const { response } = await this.apiManager.user();
        if (!response) {
            return;
        }
        const { applications } = new user_1.FullUser(this.apiManager, response);
        if (appId) {
            (0, assertions_1.validateString)(appId, 'APP_ID');
            return applications.get(appId);
        }
        return applications;
    }
    /**
     * Uploads an application
     *
     * @param file - The zip file path or Buffer
     * @returns The uploaded application data
     */
    async create(file) {
        (0, assertions_1.validatePathLike)(file, 'COMMIT_DATA');
        if (typeof file === 'string') {
            file = await (0, promises_1.readFile)(file);
        }
        const formData = new form_data_1.default();
        formData.append('file', file, { filename: 'app.zip' });
        const data = (await this.apiManager.fetch('apps/upload', {
            method: 'POST',
            body: formData.getBuffer(),
            headers: formData.getHeaders(),
        }));
        return data?.response;
    }
}
exports.default = ApplicationManager;
//# sourceMappingURL=application.js.map