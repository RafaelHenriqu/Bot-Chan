"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const promises_1 = require("fs/promises");
const assertions_1 = require("../assertions");
const path_1 = require("path");
class FilesManager {
    apiManager;
    appId;
    constructor(apiManager, appId) {
        this.apiManager = apiManager;
        this.appId = appId;
    }
    /**  */
    async list(path = '/') {
        (0, assertions_1.validateString)(path, 'LIST_FILES_PATH');
        const { response } = (await this.apiManager.application(`files/list?path=${path}`, this.appId));
        return response;
    }
    async read(path) {
        (0, assertions_1.validateString)(path, 'READ_FILE_PATH');
        const { response } = (await this.apiManager.application(`files/read?path=${path}`, this.appId));
        if (!response) {
            return;
        }
        return Buffer.from(response.data);
    }
    async create(file, fileName, path = '/') {
        (0, assertions_1.validatePathLike)(file, 'CREATE_FILE');
        if (typeof file === 'string') {
            file = await (0, promises_1.readFile)(file);
        }
        const { status } = await this.apiManager.application(`files/create`, this.appId, {
            method: 'POST',
            body: JSON.stringify({
                buffer: file.toJSON(),
                path: (0, path_1.join)(path, fileName),
            }),
        });
        return status === 'success';
    }
    async delete(path) {
        (0, assertions_1.validateString)(path, 'DELETE_FILE_PATH');
        const { status } = await this.apiManager.application(`files/delete?path=${path}`, this.appId, 'DELETE');
        return status === 'success';
    }
}
exports.default = FilesManager;
//# sourceMappingURL=files.js.map